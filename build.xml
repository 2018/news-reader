<?xml version="1.0" encoding="UTF-8"?>
<project name="overlord" default="full-build">
    <!-- By default, we assume all tools to be on the $PATH -->
    <property name="pdepend" value="/usr/bin/pdepend"/>
    <property name="phpcpd" value="/usr/bin/phpcpd"/>
    <property name="phpcs" value="/usr/bin/phpcs"/>
    <property name="phploc" value="/usr/bin/phploc"/>
    <property name="phpmd" value="/usr/bin/phpmd"/>
    <property name="phpunit" value="${basedir}/vendor/phpunit/phpunit/phpunit"/>

    <!-- depends="prepare,static-analysis,phpunit,-check-failure" -->
    <target name="full-build"
            depends="prepare,static-analysis,phpunit,-check-failure"
            description="Performs static analysis, runs the tests, and generates project documentation"/>

    <target name="quick-build" depends="prepare,lint"
            description="Performs a lint check and runs the tests (without generating code coverage reports)"/>


    <target name="static-analysis"
            depends="lint,phploc-ci,pdepend,phpmd-ci,phpcs-ci,phpcpd-ci"
            description="Performs static analysis"/>


    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <delete dir="${basedir}/build/pdepend"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <mkdir dir="${basedir}/build/pdepend"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint"
            unless="lint.done"
            description="Perform syntax check of sourcecode files">
        <apply executable="php" taskname="lint">
            <arg value="-l"/>

            <fileset dir="${basedir}/app">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/bootstrap">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/config">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/database">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/public">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
            <fileset dir="${basedir}/routes">
                <include name="**/*.php"/>
                <modified/>
            </fileset>

            <!--
            <fileset dir="${basedir}/gtests">
             <include name="**/*.php" />
             <modified />
            </fileset>
            -->
        </apply>

        <property name="lint.done" value="true"/>
    </target>

    <target name="phploc"
            unless="phploc.done"
            description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg path="${basedir}/app"/>
            <arg path="${basedir}/bootstrap"/>
            <arg path="${basedir}/config"/>
            <arg path="${basedir}/database"/>
            <arg path="${basedir}/public"/>
            <arg path="${basedir}/routes"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="phploc-ci"
            unless="phploc.done"
            depends="prepare"
            description="Measure project size using PHPLOC and log result in CSV and XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phploc}" taskname="phploc">
            <arg value="--count-tests"/>
            <arg value="--log-csv"/>
            <arg path="${basedir}/build/logs/phploc.csv"/>
            <arg value="--log-xml"/>
            <arg path="${basedir}/build/logs/phploc.xml"/>
            <arg path="${basedir}/app"/>
            <arg path="${basedir}/bootstrap"/>
            <arg path="${basedir}/config"/>
            <arg path="${basedir}/database"/>
            <arg path="${basedir}/public"/>
            <arg path="${basedir}/routes"/>
        </exec>

        <property name="phploc.done" value="true"/>
    </target>

    <target name="pdepend"
            unless="pdepend.done"
            depends="prepare"
            description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${pdepend}" taskname="pdepend">
            <arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml"/>
            <arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg"/>
            <arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg"/>
            <arg path="${basedir}/app,${basedir}/bootstrap,${basedir}/config,${basedir}/database,${basedir}/public,${basedir}/routes"/>
        </exec>

        <property name="pdepend.done" value="true"/>
    </target>

    <target name="phpmd"
            unless="phpmd.done"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/app,${basedir}/bootstrap,${basedir}/config,${basedir}/database,${basedir}/public,${basedir}/routes"/>
            <arg value="text"/>
            <arg path="${basedir}/.phpmd.xml"/>
            <!--   <arg value="cleancode,codesize,controversial,design,naming,unusedcode" /> -->
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpmd-ci"
            unless="phpmd.done"
            depends="prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpmd}" taskname="phpmd">
            <arg path="${basedir}/app,${basedir}/bootstrap,${basedir}/config,${basedir}/database,${basedir}/public,${basedir}/routes"/>
            <arg value="xml"/>
            <arg path="${basedir}/.phpmd.xml"/>
            <!--   <arg value="cleancode,codesize,controversial,design,naming,unusedcode" /> -->
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>

        <property name="phpmd.done" value="true"/>
    </target>

    <target name="phpcs"
            unless="phpcs.done"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcs}" taskname="phpcs">
            <arg value="--standard=.cs_ruleset.xml"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/app" />
            <arg path="${basedir}/bootstrap" />
            <arg path="${basedir}/config"/>
            <arg path="${basedir}/database"/>
            <arg path="${basedir}/public"/>
            <arg path="${basedir}/routes"/>

        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcs-ci"
            unless="phpcs.done"
            depends="prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcs}" output="/dev/null" taskname="phpcs">
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=.cs_ruleset.xml"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore=autoload.php"/>
            <arg path="${basedir}/app" />
            <arg path="${basedir}/bootstrap" />
            <arg path="${basedir}/config"/>
            <arg path="${basedir}/database"/>
            <arg path="${basedir}/public"/>
            <arg path="${basedir}/routes"/>

        </exec>

        <property name="phpcs.done" value="true"/>
    </target>

    <target name="phpcpd"
            unless="phpcpd.done"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="${phpcpd}" taskname="phpcpd">
        <arg path="${basedir}/app" />
        <arg path="${basedir}/bootstrap" />
        <arg path="${basedir}/config"/>
        <arg path="${basedir}/database"/>
        <arg path="${basedir}/public"/>
        <arg path="${basedir}/routes"/>
        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpcpd-ci"
            unless="phpcpd.done"
            depends="prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="${phpcpd}" taskname="phpcpd">
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/app" />
            <arg path="${basedir}/bootstrap" />
            <arg path="${basedir}/config"/>
            <arg path="${basedir}/database"/>
            <arg path="${basedir}/public"/>
            <arg path="${basedir}/routes"/>

        </exec>

        <property name="phpcpd.done" value="true"/>
    </target>

    <target name="phpunit"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit">
        <exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="phpunit-no-coverage"
            unless="phpunit.done"
            depends="prepare"
            description="Run unit tests with PHPUnit (without generating code coverage reports)">
        <exec executable="${phpunit}" failonerror="true" taskname="phpunit">
            <arg value="--configuration"/>
            <arg path="${basedir}/phpunit.xml"/>
            <arg value="--no-coverage"/>
        </exec>

        <property name="phpunit.done" value="true"/>
    </target>

    <target name="-check-failure">
        <fail message="PHPUnit did not finish successfully">
            <condition>
                <not>
                    <equals arg1="${result.phpunit}" arg2="0"/>
                </not>
            </condition>
        </fail>
    </target>


</project>

